title: VCU Sports Database 
date: September 27, 2024
authors:
    - name: Natalia Tondi
      email: tondin@vcu.edu
    - name: Erin Anderson
      email: andersones3@vcu.edu
format:
    html:
        embed-resources: true
        html-math-method: katex
        theme: spacelab
---

# Problem Description

## Problem Domain

VCU is known for their community engagement, but there isnâ€™t much visibility for students to see VCU sports. Students struggle to find sports updates like information about tryouts, job openings, etc. We found that students have a difficult time finding player stats, game schedules, and events. 

## Need for a Database

We want to provide the VCU community with a tool that engages all students to VCU sports. By creating this database we are creating an awareness of VCU sports not only to VCU students, but extending it to the Richmond community and eventually elevating the level and resources of the sports. Also, this database will provide an easy way to visualize all sports information in one place.

## Context, Scope, and Perspective

This database is for athletes, coaches, sponsors, agents, and fans. We want this database to be accessible for everybody. This database should be user friendly and easy to access. The scope of the database includes score tracking, sports positions, games and whether the team won or lose, peoples information like student-athlete information, coach information. Moreover, the database will provide visibility for athletes that want to professionalize after college, by updating their individual information like stats and contact information for agents to reach out.

## User Roles and Use Cases

### Student Athletes
- **Needs**: Access to upcoming games and personal/team stats.
- **Usage**: Check statistics, stay informed on other sports.

### Coaches
- **Needs**: Information on upcoming games and individual student and team performance.
- **Usage**: Update job openings and player information.

### Fans / Richmond Community
- **Needs**: Information on games, rosters, and game results.
- **Usage**: Stay updated on events and job opportunities.

### Sponsors and Agents
- **Needs**: Access to athlete stats and community engagement metrics.
- **Usage**: Connect with athletes and teams for potential sponsorships and recruitment.

This database will provide information that will potentially create new connections like sponsors with student-athletes/teams, and agents with student-athletes. These new connections may have further effects in VCU sports, by increasing their budget through the sponsors, or increasing the number of student-athletes enrolled in VCU because they see the opportunities that past athletes have received to go play professionally. 

## Security and Privacy

### Access Control
- The database will be publicly accessible, promoting transparency while safeguarding sensitive information.
- All users (students, coaches, fans, sponsors, agents) can read the database.
- VCU admin can read and edit information after user authentication.

### Data Encryption
- Student-athlete contact information will be encrypted, accessible only to sponsors, agents, and coaches upon verification of their credentials.

The database will be publicly accessible, promoting transparency while safeguarding sensitive information.


# Databse Design

Entity-Relational Diagram (w/Crow's foot notation)

```{mermaid}
erDiagram
    STUDENT_ATHLETE {
        string StudentID PK
        string FirstName
        string LastName
        string Email
        int Age
        string Year
        string Gender
        string Position
        string SportID FK
    }

    SPORT {
        string SportID PK
        string TypeOfSport
        date SeasonStartDate
        date SeasonEndDate
        string TeamRecord
    }

    GAMES {
        string GameID PK
        string Date
        string Result
        string VenueID FK
    }

    VENUE {
        string VenueID PK
        string TypeOfSport
        string LocationName
    }

    ATHLETIC_DEPARTMENT {
        string StaffID PK
        string FirstName
        string LastName
        string Email
        string JobTitle
        string SportID FK
    }

    STATS {
        string StatID PK
        string SportID FK
        string AthleteID FK
    }

    BASKETBALL_STATS {
        string BasketballID PK
        int Points
        int Assists
        int Rebounds
        int Blocks
    }
    VOLLEYBALL_STATS {
        string VolleyballID PK
        int Kills
        int Digs
        int Blocks
    }

    SOCCER_STATS {
        string SoccerID PK
        int Goals
        int Assists
        int Saves
    }

    BASEBALL_STATS {
        string BaseballID PK
        int Hits
        int Runs
        int Homeruns
        int RIBs
    }

    LACROSSE_STATS {
        string LacrosseID PK
        int Goals
        int Assists
        int Shots
        int GroundBalls
    }

    FIELD_HOCKEY_STATS {
        string FieldHockeyID PK
        int Goals
        int Assists
        int Saves
    }

    TRACK_AND_FIELD_STATS {
        string TrackID PK
        float Time
        float Distance
        float Height
    }
    SPORT_GAMES {
        string SportID FK 
        string GameID FK 
    }

    SPORT ||--o{ SPORT_GAMES : "has"
    GAMES ||--o{ SPORT_GAMES : "includes"
    STUDENT_ATHLETE ||--o{ SPORT : "plays"
    STUDENT_ATHLETE ||--o{ STATS : "has"
    SPORT ||--o{ ATHLETIC_DEPARTMENT : "managed by"
    GAMES ||--o{ VENUE : "held at"
    STATS ||--o{ BASKETBALL_STATS : "includes"
    STATS ||--o{ VOLLEYBALL_STATS : "includes"
    STATS ||--o{ SOCCER_STATS : "includes"
    STATS ||--o{ BASEBALL_STATS : "includes"
    STATS ||--o{ LACROSSE_STATS : "includes"
    STATS ||--o{ FIELD_HOCKEY_STATS : "includes"
    STATS ||--o{ TRACK_AND_FIELD_STATS : "includes"
```

### RELATIONAL SCHEMAS:

STUDENT_ATHLETE table



StudentID --> FirstName, LastName, Age, Email, Gender, Year, Position, SportID.
Constraints: Each student has a unique StudentID. Gender is restricted to Male/Female/Other. 


SPORT table




SportID --> TypeOfSport, SeasonEndDate, SeasonStartDate, TeamRecord.
Constraints: Each sport has a unique SportID. SeasonEndDate should be after SeasonStartDate.


GAMES table:




GameID --> Date, Result, VenueID.
Constraints: Each game has a unique GameID. Result is restricted to (win, lose or tie). 

SPORT_GAMES table:





No functional dependencies.
Constraints: The combination of SportID and GameID is unique.

ATHLETIC_DEPARTMENT:



StaffID --> FirstName, LastName, Email, JobTitle, SportID.
Constraints: Each member should have a unique StaffID. 


VENUE:



VenueID --> TypeOfSport, LocationName.
Constraints: Each venue should have a unique VenueID.

STATS:




StatID --> SportID, AthleteID.
Constraints: Each stat has a unique StatID. SportID and AthleteId should not be NULL.


BASKETBALL_STATS:




BasketballID --> Points, Assists, Blocks, Rebounds.
Constraints: SportID should not be NULL.


VOLLEYBALL_STATS:




VolleyballID --> Digs, Kills, Blocks.
Constraints: SportID should not be NULL.

SOCCER_STATS:




SoccerID --> Goals, Assists, Saves.
Constraints: SportID should not be NULL.


FIELD_HOCKEY_STATS:




FieldHockeyID --> Goals, Assists, Saves.
Constraints: SportID should not be NULL.
 

BASEBALL_STATS:




BaseballID --> Hits, Runs, Homeruns, RIBs.
Constraints: SportID should not be NULL.


TRACK_AND_FIELD_STATS:




TrackID --> Time, Height, Distance.
Constraints: SportID should not be NULL.


LACROSSE_STATS:




LacrosseID --> Goals, GroundBalls, Saves, Shots.
Constraints: SportID should not be NULL.


### FUNCTIONAL DEPENDENCIES AND NORMALIZATION:

In our proposed database schema, we identified functional dependencies to ensure proper normalization. Each table has a unique identifier, which confirms that no decomposition is necessary, as all functional dependencies involve a superkey. We also checked for multi-valued dependencies to ensure compliance with 4NF, finding none that required decomposition. This careful analysis guarantees a lossless decomposition, allowing us to maintain data integrity while optimizing the schema for efficient querying in both BCNF and 4NF.

To resolve the many-to-many relationship between Sport and Games, we created a junction table named SportGames. This table includes foreign keys referencing the primary keys of both the Sport table and the Games table, specifically SportID and GameID. By doing this, each record in SportGames represents a unique combination of a sport and a game, allowing for multiple sports to be associated with multiple games without duplicating data. This structure not only maintains referential integrity but also simplifies querying relationships between the two entities, effectively addressing the many-to-many dependency in the database schema.
# Project Managment

```{mermaid}
gantt
    title Project Timeline
    dateFormat  YYYY-MM-DD
    section Research
    Literature Review     :a1, 2024-10-01, 10d
    Data Collection       :a2, after a1, 5d
    section Development
    Design Phase          :b1, 2024-10-15, 7d
    Implementation        :b2, after b1, 15d
    Testing               :b3, after b2, 5d
    section Deployment
    Final Review          :c1, 2024-11-10, 3d
    Deployment            :c2, after c1, 2d
```
  
